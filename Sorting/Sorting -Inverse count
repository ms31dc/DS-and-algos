static int inverSlave(int[] a, int low ,int mid, int high)
{
    int n1=mid-low+1;
    int n2 = high-mid;
    int[] left=new int[n1];
    int[] right=new int[n2];

    for(int i=0;i<n1;i++){left[i]=a[low+i];}

    for(int j=0;j<n2;j++){right[j]=a[mid+1+j];}

    int i=0,j=0,k=low,res=0;

    while(i<n1 && j<n2)
    {
        if(left[i]<=right[j])
        {a[k++]=left[i++];}
        else if(left[i]>right[j])
        {a[k++]=right[j++]; res=res+(n1-i);}
    }
    while(i<n1){a[k++]=left[i++];}
    while(j<n2){a[k++]=right[j++]; }


    return res;
}

static int inverseMsaster(int[] a, int low , int high )
{
    int mid=low+(high-low)/2;
    int res=0;
    if(low<high)
    {

        res+=inverseMsaster(a,low,mid);
        res+=inverseMsaster(a,mid+1,high);

        res+=inverSlave(a,low,mid,high);
    }



    return res;
}
