package com.company;
import com.sun.xml.internal.fastinfoset.algorithm.BooleanEncodingAlgorithm;
import org.omg.PortableInterceptor.SYSTEM_EXCEPTION;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
import java.awt.Point;

import static java.lang.StrictMath.*;

import java.util.ArrayList;

// Solution structure
//{55,77,88,99,99,888,1233};
//10 ,5, 3 ,9, 2

// Java program to detect and remove loop in linked list




    class Main {


            static Node head;

            static class Node {

                int data;
                Node next;

                Node(int d) {
                    data = d;
                    next = null;
                }
            }

            // Function that detects loop in the list


            // Function to print the linked list
            void printList(Node node) {
                while (node != null) {
                    System.out.print(node.data + " ");
                    node = node.next;
                }
            }


            boolean detectLoop(Node n)
            {
                Node slow=n,fast=n;

                while(fast!=null && fast.next!=null)
                {
                    slow=slow.next;
                    fast=fast.next.next;
                    if(slow==fast){return true;}
                }

                if(slow!=fast){return false;}
                return false;
            }

            void dectectRemove(Node n)
            {
                Node slow=n,fast=n;

                while(fast!=null && fast.next!=null)
                {
                    slow=slow.next;
                    fast=fast.next.next;
                    if(slow==fast){break ;}///Incase the loop is found you continue
                }

                if(slow!=fast){return ;}///Incase there is no loop , slow!=fast and then you return nothing
                ///Now make slow go back to thead node again
                slow=head;

                Node prev=fast;///In the next 7 lines, we consider prev value and update prev value//by Sai
                while(slow!=fast)
                {
                    prev=fast;
                    slow=slow.next;
                    fast=fast.next;
                }
                prev.next=null;
//The belwo is the other method

//                while(slow.next != fast.next)   ///Now where ever the nodes slow and fast meet again , then fast's prev is the end node
//                {
//                    slow=slow.next;
//                    fast=fast.next;
//
//                }
//               fast.next=null;


            }


            static void swap(int[] a, int src,int dest)
    {
        int temp=a[src];
        a[src]=a[dest];
        a[dest]=temp;
    }

        public static void main(String args[])
    {

        Main list = new Main();
        list.head = new Node(50);
        list.head.next = new Node(20);
        list.head.next.next = new Node(15);
        list.head.next.next.next = new Node(4);
        list.head.next.next.next.next = new Node(10);

        // Creating a loop for testing
        head.next.next.next.next.next = head.next.next;

      list.dectectRemove(head);
      System.out.println("Linked List after removing loop : ");
        list.printList(head);

//
//        boolean found = list.detectLoop(head);
//        if (found)
//            System.out.println("Loop Found");
//        else
//            System.out.println("No Loop");

    }
}
